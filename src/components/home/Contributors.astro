---
import { useTranslations } from "@i18n/util";
import Button from '@components/common/Button.astro';
import members from "../contributors/gitHubData.json"; 
const t = useTranslations(Astro);

const colorList = ['#3D57DA', '#B3B6C1', '#1E1F24', '#D8D8D8'];
const getBackgroundRandomColor = () =>  colorList[Math.floor(Math.random() * colorList.length)];
---

<nacos-contributors class="nacos-contributors flex flex-col justify-center items-center bg-gary-02 py-10">
  <div class="contributors-container flex w-full bg-gray-13 p-9 mt-10">
    <div class="left-container flex-1 h-full flex flex-col justify-around md:pl-[8.5rem]">
      <div class="flex flex-col">
        <div class="text-blue-02 text-xs text-center tracking-[0.15em] md:text-left">{t('home.contributors.members')}</div>
        <div class="title text-blue-01 font-medium text-center text-lg leading-[3.5rem] md:mt-6 md:text-left md:text-[2.75rem]">
          {t('home.contributors.our')}<br class="hidden md:block" />{t('home.contributors.community.stars')}
        </div>
      </div>
      <Button 
        size="large"
        class="more mt-[4rem] rounded-3xl"
        href="https://github.com/alibaba/nacos/graphs/contributors"
      >
        {t('home.contributors.learn.more')}
      </Button>
    </div>
    <div class="right-container flex-1">
      <div id="right-container-warp" class="right-container-warp flex flex-wrap justify-around w-[27rem]">
        {
          members.slice(0, 50).map((v) => {
            const { login, html_url } = v;
            return (
              <div class="img-item relative pt-[0.6rem] pr-[0.6rem]" data-tag={login}>
                <div class="avatar-wrap relative w-[4rem] h-[4rem] align-middle">
                  <a href={html_url} class="inline-block" target="_blank">
                    <img
                      class="avatar-img relative w-[4rem] h-[4rem] text-center z-10 rounded-xl"
                      src={`../../../public/img/contributors/${login}.jpg`}
                      alt={login}
                      title={login}
                    />
                    <div class="absolute left-0 top-0 w-[4rem] h-[4rem] avatar-alt p-2 truncate overflow-hidden text-sm rounded-xl text-gray-01" style={{background: getBackgroundRandomColor()}}>{login}</div>
                  </a>
                </div>
              </div>
            );
          })
        }
      </div>
    </div>
  </div>
</nacos-contributors>
<script>
  class Contributors extends HTMLElement {
    constructor() {
      super();
      this.observeAnimation();
    }

    /**
     * 监听动画区块是否已经进入视口 && 执行动画
     */
    observeAnimation(){
      const targetDiv = document.querySelector('#right-container-warp');
      const callback = (entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            this.initAnimation();
          }
        });
      };
      const observer = new IntersectionObserver(callback, {
        root: null, 
        rootMargin: '0px',
        threshold: 0
      });
      observer.observe(targetDiv);
    }

    /**
     * 执行动画
     */
    initAnimation(){
      const GROUP_NUMBER = 4;
      const images = document.querySelectorAll('.right-container-warp .img-item');
      const groupList = this.getGroupIndexList(images.length, GROUP_NUMBER);
      for(let i = 0; i< GROUP_NUMBER; i++){
        const timer = setTimeout(() => {
          this.showRandomItems(images, groupList[i], timer);
        }, i*1000)
      }
    }

    /**
     * 获取每一次动画要显示元素的索引值列表
     * @param numbers 所有图像节点数组
     * @param groupNum 分组的目标个数
     */
    getGroupIndexList(numbers, groupNum){
      // 每组的数量
      const perGroupNum = Math.floor(numbers/groupNum);
      const newNumbers = Array(numbers).fill(0).map((_, index) => index + 1 -1);
      // Fisher-Yates洗牌算法
      for (let i = newNumbers.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1)); 
        [newNumbers[i], newNumbers[j]] = [newNumbers[j], newNumbers[i]];
      }
      const result = [];
      for(let i = 0; i< groupNum; i++){
        result.push(newNumbers.slice(i*perGroupNum, (i+1) * perGroupNum));
      }
      return result;
    }

    /**
     * 具体的动画实现过程
     * @param images 所有图像节点数组
     * @param groupRow 每次显示时，每组元素的下标集合
     */
    showRandomItems(images, groupRow, timer){
      const newImages = [];
      const length = groupRow.length;
      for(let i = 0; i < length; i++){
        const imgItem = images[groupRow[i]];
        newImages.push(imgItem);
      }
      newImages.forEach((item, index) => {
        setTimeout(() => {
          item.classList.add('show');
        }, (index * (1000 / 6)));
      });
      window.clearTimeout(timer);
    }
  }

  customElements.define('nacos-contributors', Contributors);
</script>

<style>
  .contributors-container{
    .right-container {
      .right-container-warp{
        .img-item {
          flex: 0 0 16.66%; 
          max-width: 16.66%; 
          box-sizing: border-box;
          opacity: 0;
          transition: opacity 1s ease-in-out; 
          &.show{
            opacity: 1;
          }
        }
      }
    }
  }
  /*  小于 768px */
  @media (max-width: 768px) {
    .contributors-container{
      display: block;
      .left-container {
        .more {
          display: none;
        }
      }
      .right-container {
        .right-container-warp {
          margin: auto;
          width: 18rem;
          .img-item {
            .avatar-wrap, .avatar-img, .avatar-alt {
              width: 2.4rem;
              height: 2.4rem;
            }
          }
        }
      }
    }
  }

  /*  768px < width < 1070px */
  @media (min-width: 768px) and (max-width: 1070px) {
    .left-container {
      .title{
        font-size: 2.4rem;
      }
      .more {
        margin-top:2.5rem;
      }
    }
    .right-container {
      .right-container-warp {
        width: 25rem;
        .img-item {
          .avatar-wrap, .avatar-img, .avatar-alt {
            width: 3.5rem;
            height: 3.5rem;
          }
        }
      }
    }
  }
</style>